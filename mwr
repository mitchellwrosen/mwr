#!/usr/bin/env bash

tool() {
  if [ -z "$MWR_TOOL" ]; then
    # Prefer building with cabal, but fall back on stack if we aren't in a
    # Haskell project (to leverage the "global project").
    if [ -f cabal.project ]; then
      echo cabal
    elif [ -f stack.yaml ]; then
      echo stack
    elif ls ./*.cabal >/dev/null 2>&1; then
      echo cabal
    else
      echo stack
    fi
  else
    echo "$MWR_TOOL"
  fi
}

usage() {
  echo "Usage: mwr COMMAND [ARGS]"
  echo "Extend available commands with mwr-COMMAND executables"
  echo ""
  echo "Available commands:"
  echo "  bench     Run all benchmarks."
  echo "  build     Build all components."
  echo "  dev       Quickly rebuild modules that are modified."
  echo "  dev-run   Quickly rebuild modules that are modified, then run 'main'."
  echo "  exec      Run a shell command."
  echo "  freeze    Freeze dependencies."
  echo "  test      Run all test suites."
  echo "  release   Build all components with optimization enabled."
  echo "  repl      Launch a REPL."
  echo "  run       Run a project executable."
  echo "  unfreeze  Delete frozen dependencies."
  echo ""
  echo "Custom commands:"

  compgen -c | grep ^mwr- | sort | uniq | cut -c5- | xargs -I{} echo "  {}"

  if ! type cabal >/dev/null 2>&1; then
    echo "Warning: cabal not found"
  else
    if [[ $(cabal --version | head -n1) < "cabal-install version 2.1" ]]; then
      echo "Warning: cabal-install version too low (2.1.0.0+ recommended)"
    fi
  fi
  if ! type stack >/dev/null 2>&1; then
    echo "Warning: stack not found"
  fi

  exit 0
}

if [ -z "$1" ]; then
  usage
fi

# GHC opts that we pass no matter what.
# TODO: Add fshow-hole-constraints for 8.2+
GHCOPTIONS="-fprint-expanded-synonyms -fprint-explicit-foralls -fprint-explicit-kinds -fprint-potential-instances -H16m"

# Note: we disable -fdefer-typed-holes below temporarily due to
# https://ghc.haskell.org/trac/ghc/ticket/14732

case "$1" in
  bench)
    case $(tool) in
      cabal)
        cabal new-bench --disable-executable-stripping --ghc-options="-freverse-errors -Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS" -j "${@:2}"
        ;;
      stack)
        stack build --bench --ghc-options="-freverse-errors -Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS" --no-strip "${@:2}"
        ;;
    esac
    ;;
  # -fdefer-typed-holes
  build)
    case $(tool) in
      cabal)
        cabal new-build --disable-executable-stripping --enable-benchmarks --enable-tests --ghc-options="-freverse-errors -Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS" -j -O0 "${@:2}"
        ;;
      stack)
        stack build --fast --ghc-options="-freverse-errors -Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS" --no-strip "${@:2}"
        ;;
    esac
    ;;
  dev)
    case $(tool) in
      cabal)
        ghcid -c "cabal new-repl -O0 --ghc-options=\"-Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS\" ${*:2}" --restart cabal.project --restart *.cabal
        ;;
      stack)
        # Can't pass more than one option because of
        # https://github.com/commercialhaskell/stack/issues/3315
        # stack ghci --ghc-options="-w $GHCOPTIONS" "${@:2}"
        # ghcid -c "stack ghci --ghc-options=\"-Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS\" ${*:2}" --restart package.yaml --restart stack.yaml
        ghcid -c "stack ghci --ghc-options=\"-Wall\" ${*:2}" --restart package.yaml --restart stack.yaml
        ;;
    esac
    ;;
  dev-run)
    case $(tool) in
      cabal)
        ghcid -c "cabal new-repl -O0 --ghc-options=\"-Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS\" ${*:2}" --restart cabal.project --restart *.cabal -T ":main" -W
        ;;
      stack)
        # Can't pass more than one option because of
        # https://github.com/commercialhaskell/stack/issues/3315
        # stack ghci --ghc-options="-w $GHCOPTIONS" "${@:2}"
        # ghcid -c "stack ghci --ghc-options=\"-Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS\" ${*:2}" --restart package.yaml --restart stack.yaml -T ":main" -W
        ghcid -c "stack ghci --ghc-options=\"-Wall\" ${*:2}" --restart package.yaml --restart stack.yaml -T ":main" -W
        ;;
    esac
    ;;
  release)
    case $(tool) in
      cabal)
        cabal new-build --enable-benchmarks --enable-tests --ghc-options="-freverse-errors -Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS" -j "${@:2}"
        ;;
      stack)
        exit 1
        ;;
    esac
    ;;
  exec)
    case $(tool) in
      cabal)
        cabal new-exec "${@:2}"
        ;;
      stack)
        stack exec "${@:2}"
        ;;
    esac
    ;;
  freeze)
    case $(tool) in
      cabal)
        cabal new-freeze
        ;;
      stack)
        exit 1
        ;;
    esac
    ;;
  test)
    case $(tool) in
      cabal)
        cabal new-test --disable-executable-stripping --ghc-options="-freverse-errors -Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS" -j -O0 "${@:2}"
        ;;
      stack)
        stack build --fast --ghc-options="-freverse-errors -Wall -Widentities -Wincomplete-record-updates $GHCOPTIONS" --no-strip --test "${@:2}"
        ;;
    esac
    ;;
  # -fdefer-typed-holes
  repl)
    case $(tool) in
      cabal)
        cabal new-repl --ghc-options="-w $GHCOPTIONS" -O0 "${@:2}"
        ;;
      stack)
        # Can't pass more than one option because of
        # https://github.com/commercialhaskell/stack/issues/3315
        # stack ghci --ghc-options="-w $GHCOPTIONS" "${@:2}"
        stack ghci --ghc-options="-w" "${@:2}"
        ;;
    esac
    ;;
  run)
    case $(tool) in
      cabal)
        cabal new-run "${@:2}"
        ;;
      stack)
        exit 1
        ;;
    esac
    ;;
  unfreeze)
    case $(tool) in
      cabal)
        rm -f cabal.project.freeze
        ;;
      stack)
        exit 1
        ;;
      esac
    ;;
  *)
    if type "mwr-$1" >/dev/null 2>&1; then
      "mwr-$1" "${@:2}"
    else
      usage
    fi
    ;;
esac
